@using System.Linq.Expressions
@using MoonCore.Blazor.Helpers
@using MoonCore.Blazor.Tailwind.Alerts
@using MoonCore.Blazor.Tailwind.Forms
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.Helpers
@using MoonCore.Helpers
@using MoonCore.Models

@typeparam TItem
@typeparam TCreateForm
@typeparam TUpdateForm

@inject AlertService AlertService
@inject ToastService ToastService
@inject QueryParameterService QueryParameterService

@if (State == CrudState.View)
{
    if (Options.UseHeader)
    {
        <PageHeader Title="@Options.ItemsName">
            @if (SelectedItems.Count == 0)
            {
                if (Actions != null)
                {
                    @Actions
                }

                <button @onclick="StartCreate" class="btn btn-primary">
                    Create
                </button>
            }
            else
            {
                if (SelectionActions != null)
                {
                    @SelectionActions.Invoke(SelectedItems.ToArray())
                }

                <WButton OnClick="_ => DeleteSelection()" CssClasses="btn btn-danger">
                    Delete selection
                </WButton>
            }
        </PageHeader>
    }
    else if (Options.UseBar)
    {
        <div class="bg-gray-750 py-2 rounded-lg">
            <div class="font-normal text-white text-lg px-3">
                <div class="flex items-center justify-between">
                    <span class="ml-2">@Options.ItemsName</span>
                    <div class="space-x-2">
                        <button @onclick="StartCreate" class="btn btn-primary">Create</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="mt-5">
        <ItemTable @ref="Table"
                   TItem="TItem"
                   BackgroundColor="bg-gray-800"
                   ItemsCallback="Options.ItemLoader"
                   ShowBorder="Options.ShowViewTableBorder">

            <Column TItem="TItem" HeadCssClasses="pl-2 w-5" CssClasses="pl-2 w-5">
                <HeadTemplate>
                    @if (SelectedItems.Count == Table.CurrentItems.Length && Table.CurrentItems.Length != 0)
                    {
                        <input @onclick="() => ChangeAllSelection(false)" checked="checked" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                    else
                    {
                        <input @onclick="() => ChangeAllSelection(true)" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                </HeadTemplate>
                <Template>
                    @if (SelectedItems.Contains(context))
                    {
                        <input @onclick="() => ChangeSelection(context, false)" checked="checked" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                    else
                    {
                        <input @onclick="() => ChangeSelection(context, true)" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                </Template>
            </Column>

            @View

            <Column TItem="TItem">
                <Template>
                    <div class="flex justify-end italic">
                        <a @onclick="() => StartUpdate(context)" @onclick:preventDefault href="#" class="text-primary-500 mr-3">
                            Update
                        </a>
                        <a @onclick="() => StartDelete(context)" @onclick:preventDefault href="#" class="text-danger-500">
                            Delete
                        </a>
                    </div>
                </Template>
            </Column>

        </ItemTable>
    </div>
}
else if (State == CrudState.Create)
{
    if (Options.UseHeader)
    {
        <PageHeader Title="@("Create " + Options.ItemName)">
            <button @onclick="BackToView" class="btn btn-secondary me-1">
                Back
            </button>
            <WButton OnClick="_ => FinishCreate()" CssClasses="btn btn-primary">
                Create @Options.ItemName
            </WButton>
        </PageHeader>
    }
    else if (Options.UseBar)
    {
        <div class="bg-gray-750 py-2 rounded-lg">
            <div class="font-normal text-white text-lg px-3">
                <div class="flex items-center justify-between">
                    <a href="#" @onclick:preventDefault @onclick="BackToView">
                        <i class="bi bi-chevron-left text-gray-300"></i>
                        <span class="ml-2">Back</span>
                    </a>
                    <div>
                        <WButton CssClasses="btn btn-primary" OnClick="_ => FinishCreate()">
                            Create @Options.ItemName
                        </WButton>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="mt-5">
        <HandleForm @ref="CreateHandle" Model="CreateForm">
            <GeneratedForm Model="CreateForm" OnConfigure="CreateFormConfiguration"/>
        </HandleForm>
    </div>
}
else if (State == CrudState.Update)
{
    if (Options.UseHeader)
    {
        <PageHeader Title="@("Update " + Options.ItemName)">
            <button @onclick="BackToView" class="btn btn-secondary me-1">
                Back
            </button>
            <WButton OnClick="_ => FinishUpdate()" CssClasses="btn btn-primary">
                Update @Options.ItemName
            </WButton>
        </PageHeader>
    }
    else if (Options.UseBar)
    {
        <div class="bg-gray-750 py-2 rounded-lg">
            <div class="font-normal text-white text-lg px-3">
                <div class="flex items-center justify-between">
                    <a href="#" @onclick:preventDefault @onclick="BackToView">
                        <i class="bi bi-chevron-left text-gray-300"></i>
                        <span class="ml-2">Back</span>
                    </a>
                    <div>
                        <WButton CssClasses="btn btn-primary" OnClick="_ => FinishUpdate()">
                            Update @Options.ItemName
                        </WButton>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="mt-5">
        <HandleForm @ref="UpdateHandle" Model="UpdateForm">
            <GeneratedForm Model="UpdateForm" OnConfigure="UpdateFormConfiguration"/>
        </HandleForm>
    </div>
}
else if (State == CrudState.Detail)
{
}

@code
{
    // General
    [Parameter] public Action<CrudOptions<TItem, TCreateForm, TUpdateForm>> OnConfigure { get; set; }

    private CrudOptions<TItem, TCreateForm, TUpdateForm> Options = new();
    private CrudState State = CrudState.View;
    protected TItem CurrentItem;

    protected override async Task OnInitializedAsync()
    {
        OnConfigure.Invoke(Options);

        if (Options.QueryIdentifier == null)
        {
            // Build a Func<TItem, string> object
            Options.QueryIdentifier = FuncHelper.FromProperty<TItem, string>("Id");
        }

        // Auto set names
        if (string.IsNullOrEmpty(Options.ItemName))
            Options.ItemName = typeof(TItem).Name;

        if (string.IsNullOrEmpty(Options.ItemsName))
            Options.ItemsName = Options.ItemName + "s";

        // Load states from query
        if (QueryParameterService.HasKey(Options.QueryStateId))
            State = QueryParameterService.GetValue<CrudState>(Options.QueryStateId);

        if (State is CrudState.Detail or CrudState.Update)
        {
            // This check prevents states from being called without an item even though
            // they require an item
            if (!QueryParameterService.HasKey(Options.QueryItemId))
            {
                State = CrudState.View;
                return;
            }

            var itemId = QueryParameterService.GetValue<string>(Options.QueryItemId);
            var item = await Options.SingleItemLoader.Invoke(itemId);

            // If the item doesnt exist we will just show the view
            if (item == null)
            {
                State = CrudState.View;
                return;
            }

            CurrentItem = item;
        }

        if (State == CrudState.Create)
        {
            CreateForm = Activator.CreateInstance<TCreateForm>()!;
            CreateFormConfiguration = Options.OnConfigureCreate;
        }
        else if (State == CrudState.Update)
        {
            UpdateForm = Mapper.Map<TUpdateForm>(CurrentItem!);
            UpdateFormConfiguration =
                formConfiguration => Options.OnConfigureUpdate.Invoke(CurrentItem, formConfiguration);
        }
    }

    #region View

    [Parameter] public RenderFragment View { get; set; }
    [Parameter] public RenderFragment? Actions { get; set; }

    private ItemTable<TItem> Table;

    public async Task BackToView()
    {
        QueryParameterService.Modify(collection =>
        {
            if (State == CrudState.Detail || State == CrudState.Update && collection.Get(Options.QueryItemId) != null)
                collection.Remove(Options.QueryItemId);

            collection.Set(Options.QueryStateId, CrudState.View.ToString().ToLower());
        });

        State = CrudState.View;
        CurrentItem = default!;
        SelectedItems.Clear();

        await InvokeAsync(StateHasChanged);
    }

    public async Task ReloadView()
    {
        SelectedItems.Clear();
        await Table.Refresh();
        
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Create

    private TCreateForm CreateForm;
    private HandleForm CreateHandle;
    private Action<FormConfiguration<TCreateForm>> CreateFormConfiguration;

    private async Task StartCreate()
    {
        State = CrudState.Create;
        QueryParameterService.SetValue(Options.QueryStateId, State);

        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        CreateFormConfiguration = Options.OnConfigureCreate;

        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishCreate()
    {
        CreateHandle.OnValidSubmit = () => Options.OnCreate(CreateForm);

        var submissionSuccessful = await CreateHandle.Submit();

        if (!submissionSuccessful)
            return;

        await ToastService.Success($"{Options.ItemName} created successfully", "");

        await BackToView();
    }

    #endregion

    #region Update

    private TUpdateForm UpdateForm;
    private HandleForm UpdateHandle;
    private Action<FormConfiguration<TUpdateForm>> UpdateFormConfiguration;

    private async Task StartUpdate(TItem item)
    {
        CurrentItem = item;

        State = CrudState.Update;

        QueryParameterService.Modify(collection =>
        {
            collection.Set(Options.QueryStateId, State.ToString().ToLower());
            collection.Set(Options.QueryItemId, Options.QueryIdentifier.Invoke(CurrentItem));
        });

        UpdateForm = Mapper.Map<TUpdateForm>(CurrentItem!);
        UpdateFormConfiguration =
            formConfiguration => Options.OnConfigureUpdate.Invoke(CurrentItem, formConfiguration);

        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishUpdate()
    {
        UpdateHandle.OnValidSubmit = () => Options.OnUpdate(CurrentItem, UpdateForm);
        
        var submissionSuccessful = await UpdateHandle.Submit();
        
        if(!submissionSuccessful)
            return;

        await ToastService.Success($"{Options.ItemName} updated successfully", "");

        await BackToView();
    }

    #endregion

    #region Delete

    private async Task StartDelete(TItem item)
    {
        CurrentItem = item;

        await AlertService.ConfirmDanger(
            "Confirm deletion",
            "You are going to delete this item permanently. This action cannot be undone. Are you sure you want to continue?",
            FinishDelete
        );
    }

    private async Task FinishDelete()
    {
        try
        {
            await Options.OnDelete.Invoke(CurrentItem);
            await ToastService.Success($"{Options.ItemName} deleted successfully");
            
            await ReloadView();
        }
        catch (Exception)
        {
            await ReloadView();
            throw;
        }
    }

    #endregion

    #region Selection

    [Parameter] public RenderFragment<TItem[]>? SelectionActions { get; set; }

    private List<TItem> SelectedItems = new();

    private Task ChangeSelection(TItem item, bool isSelected)
    {
        if (isSelected)
        {
            if (!SelectedItems.Contains(item))
                SelectedItems.Add(item);
        }
        else
        {
            if (SelectedItems.Contains(item))
                SelectedItems.Remove(item);
        }

        return Task.CompletedTask;
    }

    private Task ChangeAllSelection(bool isSelected)
    {
        SelectedItems.Clear();

        if (isSelected)
            SelectedItems.AddRange(Table.CurrentItems);

        return Task.CompletedTask;
    }

    #endregion

    #region Selection Actions

    private async Task DeleteSelection()
    {
        var items = SelectedItems.ToArray();

        async Task LaunchDeletion()
        {
            await ToastService.Progress(
                $"Deleting {items.Length} items",
                "",
                async _ =>
                {
                    foreach (var item in items)
                        await Options.OnDelete(item);
                    
                    await ToastService.Success($"Successfully deleted {items.Length} items");
                    await ReloadView();
                });
        }

        await AlertService.ConfirmDanger(
            $"Deleting {items.Length} items(s)",
            $"Do you really want to delete {items.Length} items(s)? This action cannot be undone",
            LaunchDeletion
        );
    }

    #endregion

}